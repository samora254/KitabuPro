import { useState, useCallback } from 'react';
import { OpenAI } from 'openai';
import Constants from 'expo-constants';
import CurriculumService from '@/services/curriculumService';
import VectorService from '@/services/vectorService';

// Initialize OpenAI client with fallback for demo mode
const openai = new OpenAI({
  apiKey: Constants.expoConfig?.extra?.OPENAI_API_KEY || 'demo-api-key',
  dangerouslyAllowBrowser: true // Note: In production, API calls should be proxied through a backend
});

interface UseCurriculumAIProps {
  userId: string;
}

interface UseCurriculumAIReturn {
  loading: boolean;
  error: string | null;
  generateExplanation: (topicId: string, complexity?: 'simple' | 'standard' | 'detailed') => Promise<string>;
}

export function useCurriculumAI({ userId }: UseCurriculumAIProps): UseCurriculumAIReturn {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Generate detailed explanation for a specific topic
  const generateExplanation = useCallback(async (
    topicId: string,
    complexity: 'simple' | 'standard' | 'detailed' = 'standard'
  ): Promise<string> => {
    setLoading(true);
    setError(null);
    
    try {
      // In demo mode, return a pre-written explanation
      if (Constants.expoConfig?.extra?.OPENAI_API_KEY === 'demo-api-key') {
        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay
        setLoading(false);
        
        return `This is a demo explanation for the topic. In a production environment, this would be generated by OpenAI based on the curriculum content.

The explanation would be tailored to the ${complexity} complexity level you requested and would cover all the key concepts in the topic.

For a real implementation:
1. Make sure you have valid API keys for OpenAI and Pinecone
2. Set these keys in your environment variables
3. The AI will generate personalized explanations based on the curriculum data`;
      }
      
      // Get topic details
      const topicResult = CurriculumService.getTopic(topicId);
      if (!topicResult) {
        setError("Topic not found");
        setLoading(false);
        return "Topic not found. Please try a different topic.";
      }
      
      const { topic, curriculum } = topicResult;
      
      // Prepare system message
      const systemMessage = `You are Kitabu AI, an educational assistant for ${curriculum.grade} students.
Your task is to generate a ${complexity} explanation of the topic "${topic.title}" for a student.

Topic details:
- Title: ${topic.title}
- Description: ${topic.description}
- Key terms: ${topic.keyTerms.map(kt => `${kt.term}: ${kt.definition}`).join('; ')}
- Learning objectives: ${topic.learningObjectives.map(lo => lo.description).join('; ')}

For a ${complexity} explanation:
${complexity === 'simple' ? '- Use simple language and basic concepts\n- Focus on the most important ideas\n- Use concrete examples\n- Keep it brief and clear' : 
  complexity === 'detailed' ? '- Provide in-depth explanations\n- Include advanced concepts\n- Connect to related topics\n- Use precise terminology\n- Provide multiple examples' :
  '- Balance depth and clarity\n- Cover key concepts thoroughly\n- Use appropriate terminology\n- Provide helpful examples'}`;
      
      // Generate explanation
      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          { role: "system", content: systemMessage },
          { role: "user", content: `Please explain the topic "${topic.title}" at a ${complexity} level for a ${curriculum.grade} student.` }
        ],
        temperature: 0.7,
        max_tokens: complexity === 'simple' ? 300 : complexity === 'detailed' ? 1000 : 600
      });
      
      setLoading(false);
      return response.choices[0].message.content || "I'm sorry, I couldn't generate an explanation.";
    } catch (error) {
      console.error("Error generating explanation:", error);
      setError("Failed to generate explanation. Please try again.");
      setLoading(false);
      return "I'm sorry, I encountered an error while generating an explanation. Please try again later.";
    }
  }, [userId]);

  return {
    loading,
    error,
    generateExplanation
  };
}

export default useCurriculumAI;